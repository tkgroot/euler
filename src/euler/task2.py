"""
Project Euler Task 2 - Even Fibonacci Numbers.

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four
million, find the sum of the even-valued terms.
"""

num_dict = {0: 0, 1: 1}


def fibo(x):
    """
    Find the fibonacci number in the fibonacci sequence.

    :param x: numerical position of the fibonacci number
    :return: the fibonacci number in that position
    """
    if x == 0:
        return 0
    if x == 1:
        return 1
    try:
        if num_dict[x]:
            return num_dict[x]
    except IndexError:
        return fibo(x - 1) + fibo(x - 2)


def calculate_sum(limit):
    """
    Calculate the sum of the fibonacci sequence.

    :param limit: the upper limit
    :return: sum of
    """
    sum, idx = 0, 0

    while list(num_dict.values())[-1] < limit:
        # if idx % 1000 == 0:
        #     print('{} done'.format(idx))
        num_dict[idx] = fibo(idx)

        if num_dict[idx] % 2 == 0:
            sum += num_dict[idx]
        idx += 1
    return sum


def main():
    """Print the result."""
    print(calculate_sum(4000000))


if __name__ == "__main__":
    main()
